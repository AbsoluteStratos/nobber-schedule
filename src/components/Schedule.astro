---
import { useEffect } from 'react';
import EventCard from "./EventCard.astro";
import data from "../data/schedule.json";
import DateSeparator from './DateSeparator.astro';
import moment from "moment-timezone";

import currentMarker from '../assets/marker.svg';

interface Event {
  title: string;
  description: string;
  ["start-time"]: string;
  ["end-time"]: string;
  image?: string;
  players?: string[];
}

// Sort events by start time
const events: Event[] = data.events.sort(
  (a: Event, b: Event) =>
    new Date(a["start-time"]+"Z").getTime() - new Date(b["start-time"]+"Z").getTime()
);

// Prepare events with date separators
const eventsWithSeparators = [];
let lastDate = null;
let dateCount = 1;
let eventCount = 1;

// Set up time zone / date format for day seperators
const options = { 
  timeZone: 'America/New_York', 
  year: 'numeric', 
  month: '2-digit', 
  day: '2-digit' 
};

for (const ev of events) {
  // const utcDate = new Date(ev["start-time"]+"Z");
 const eventDate = moment.tz(ev["start-time"], data["time-zone"]).format("YYYY-MM-DD");
  if (eventDate !== lastDate) {
    eventsWithSeparators.push({ type: "separator", date: eventDate, index: dateCount});
    dateCount += 1;
    lastDate = eventDate;
  }
  eventsWithSeparators.push({ type: "event", data: ev, index: eventCount});
  eventCount += 1;
}
---

<div class="schedule-container" id="schedule-container">
  <div id="timezone-info"></div>
  {eventsWithSeparators.map(item => 
    item.type === "separator" ? (
      <DateSeparator date={item.date} index={item.index}/>
    ) : (
      <EventCard
        title={item.data.title}
        description={item.data.description}
        start={moment.tz(item.data["start-time"], data["time-zone"]).toDate()}
        end={moment.tz(item.data["end-time"], data["time-zone"]).toDate()}
        image={item.data.image}
        index={item.index}
        players={item.data.players}
      />
    )
  )}
  <div id="current-time-indicator"></div>
</div>

<script type="module">

  /* Deal with time strings */
  const tzinfo = document.getElementById('timezone-info');
  const zone = new Date().toLocaleTimeString('en-us',{timeZoneName:'short'}).split(' ')[2]
  tzinfo.textContent = `Times in ${zone}`

  document.querySelectorAll(".event-card").forEach(card => {
    const start = new Date(card.dataset.startTime);
    const end = new Date(card.dataset.endTime);

    const timeEl = card.querySelector("[data-time]");
    const dateEl = card.querySelector("[data-date]");
    if (timeEl) {
        timeEl.textContent =
        `${start.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })} â€“ ` +
        `${end.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })} `;
    }

    if (dateEl) {
        dateEl.textContent = end.toLocaleDateString([], {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        });
    }
    });

  const container = document.getElementById('schedule-container');
  const indicator = document.getElementById('current-time-indicator');

  function updateCurrentTimeIndicator() {
    const now = new Date();
    const eventElements = Array.from(container.querySelectorAll('.event-card')); // assuming EventCard renders as <article>
    console.log("Current time: " + now);
    let indicatorPos = 0;

    for (let el of eventElements) {
      const startTime = new Date(el.dataset.startTime);
      const endTime = new Date(el.dataset.endTime);
      if (now >= startTime && now <= endTime) {
        const progress = (now - startTime) / (endTime - startTime);
        const computedStyle = window.getComputedStyle(el);
        indicatorPos = el.offsetTop - parseFloat(computedStyle.paddingTop) - parseFloat(computedStyle.marginTop) + (el.offsetHeight ) * progress - indicator.offsetHeight / 2;
        break;
      } else if (now < startTime) {
        indicatorPos = el.offsetTop - 45;
        // indicatorPos += 10;
        break;
      } else {
        indicatorPos = el.offsetTop + el.offsetHeight - indicator.offsetHeight / 2;
      }
    }

    indicator.style.top = indicatorPos + 'px';
  }

  updateCurrentTimeIndicator();
  setInterval(updateCurrentTimeIndicator, 60000); // update every minute
</script>

<style
  define:vars={{ marker_url: `url('${currentMarker.src}')`}}
>
.schedule-container {
  display: flex;
  flex-direction: column;
  gap: 16px;
  max-width: 50rem;
  margin: 0 auto;
  padding: 20px;
  position: relative;
  font-family: 'Trebuchet MS', monospace, sans-serif;
  margin-bottom: 75px;
}

#current-time-indicator {
  position: absolute;
  left: -6rem;
  width: 30rem;
  height: 6rem;
  display: flex;
  align-items: center;
  pointer-events: none;
  background-image: var(--marker_url);
  background-size: 100% 100%;
  background-repeat: no-repeat;
  z-index: -1;
  /* box-shadow: 0 0 8px var(--shadow-color); */
}

#timezone-info{
  text-align: right;
  margin-bottom: -60px;
  user-select: none;
  color: var(--text-primary-color);
  text-shadow: 2px 2px 4px var(--shadow-color);
}
</style>