---
interface Props {
  title: string;
  description: string;
  start: string;
  end: string;
  image?: string;
  index: number;
}

const { title, description, start, end, image, index } = Astro.props;
---

<div
  class="event-card"
  style={`animation-delay: ${index * 0.05}s;`}
  data-start-time={start}
  data-end-time={end}
>
  <div class="event-content">
    <h2>{title}</h2>
    <p class="time" data-time></p>
    <p class="date" data-date></p>
    <p class="description">{description}</p>
  </div>
  {image && (
    <div class="event-image" style={`background-image: url('${image}')`}></div>
  )}
</div>

<style>
  .event-card {
    display: flex;
    align-items: stretch;
    padding: 16px;
    border-radius: 12px;
    border: 2px solid var(--border-color);
    box-shadow: 0 0 8px var(--shadow-color);
    background-color: var(--primary-color); /* fallback if no image */
    background-size: cover;
    background-position: center center;
    color: var(--text-primary-color); /* ensure text is readable on dark overlay */
    position: relative;
    /* animation */
    opacity: 0;
    transform: translateX(-30px);
    animation: slideIn 0.6s ease-out forwards;
  }

  @keyframes slideIn {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .event-content {
    flex: 1;
    z-index: 1;
  }

  .event-content h2 {
    margin: 0;
    font-size: 1.2rem;
    color: var(--text-primary-color);
  }

  .event-content .time {
    margin: 4px 0;
    font-weight: bold;
    color: var(--text-secondary-color);
  }

  .event-content .date {
    margin: 4px 0;
    font-size: small;
    color: var(--text-secondary-color);
  }

  .event-content .description{
    color: var(--text-thirdary-color);
  }

  .event-image {
    flex: 1;
    background-size: cover;
    background-position: center;
    border: 2px solid var(--border-color);
    border-radius: 12px 12px 12px 12px;
  }
</style>