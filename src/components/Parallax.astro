---
import parallaxData from "../data/parallax.json";

interface ParallaxElement {
  image: string;
  hspace: string; // distance from center horizontally
  vspace: string; // vertical offset
  size: [string, string]; // width, height
  zdist: number; // parallax factor
}

const elements: ParallaxElement[] = parallaxData.elements;
---
<div class="parallax-container">
  {elements.map((el, idx) => (
    <div
      class="parallax-item"
      style={{
        "--img": `url(${el.image})`,
        "--w": el.size[0],
        "--h": el.size[1],
        "--hspace": el.hspace,
        "--vspace": el.vspace,
      }}
      data-zdist={el.zdist}
      key={idx}
    />
  ))}
</div>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  const items = document.querySelectorAll(".parallax-item");

  const container = document.getElementsByClassName("parallax-container")[0];
  function updateHeight() {
    console.log(document.body.scrollHeight)
    container.style.height = document.body.scrollHeight + "px";
  }

  // updateHeight();

  items.forEach((item) => {
    const zdist = parseFloat(item.dataset.zdist || "0");

    gsap.to(item, {
      y: () => -(window.innerHeight * 0.2) * zdist, // translate y
      ease: "none",
      scrollTrigger: {
        trigger: item,
        start: "top bottom",
        scrub: true,
      },
    });
  });
</script>

<style>
<style>
.parallax-wrapper {
  position: relative;
  width: 100%;
  min-height: 100%;
}

.parallax-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  overflow-x: clip;
}

.parallax-item {
  position: absolute;
  left: 50%;
  top: var(--vspace);
  transform: translate(
    calc(-50% + var(--hspace))
  );
  width: var(--w);
  height: var(--h);
  background-image: var(--img);
  background-size: cover;
  background-position: center;
  will-change: transform;
}
</style>